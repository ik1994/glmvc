using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using CommandLine;
using CommandLine.Text;
using System.IO;
using System.Reflection;
using CQS.Genome.Pileup;
using RCPA.Seq;
using CQS.Commandline;
using CQS;

namespace RSMC
{
  public class AnnotationOptions : AbstractProgramOptions
  {
    [Option('i', "input", Required = true, MetaValue = "FILE", HelpText = "Input file generated by filter function.")]
    public string InputFile { get; set; }

    [Option("annovar", HelpText = "Annotation by annovar.")]
    public bool Annovar { get; set; }

    [Option("annovar_set_default", DefaultValue = false, HelpText = "Set current setting as annovar default setting")]
    public bool AnnovarSetDefault { get; set; }

    [Option("annovar_db", MetaValue = "DIRECTORY", HelpText = "The directory contains annovar databases")]
    public string AnnovarDatabaseDirectory { get; set; }

    [Option("annovar_buildver", MetaValue = "STRING", HelpText = "Annovar database version (such as hg19, mm10)")]
    public string AnnovarBuildVersion { get; set; }

    [Option("annovar_verdbsnp", MetaValue = "STRING", HelpText = "dbSNP version to use")]
    public string AnnovarVerdbsnp { get; set; }

    [Option("annovar_ver1000g", MetaValue = "STRING", HelpText = "1000G version")]
    public string AnnovarVer1000g { get; set; }

    [Option("annovar_veresp", MetaValue = "STRING", HelpText = "ESP version")]
    public string AnnovarVeresp { get; set; }

    [Option("annovar_genetype", MetaValue = "STRING", DefaultValue = "refgene", HelpText = "gene definition can be refgene , knowngene, ensgene")]
    public string AnnovarGenetype { get; set; }

    [Option("distance", HelpText = "Annotation by distance to entries from assigned bed files.")]
    public bool Distance { get; set; }

    [Option("distance_insertion_bed", MetaValue = "FILE", HelpText = "Insertion bed file for distance calculation.")]
    public string DistanceInsertionBed { get; set; }

    [Option("distance_deletion_bed", MetaValue = "FILE", HelpText = "Deletion bed file for distance calculation.")]
    public string DistanceDeletionBed { get; set; }

    [Option("distance_junction_bed", MetaValue = "FILE", HelpText = "Junction bed file for distance calculation.")]
    public string DistanceJunctionBed { get; set; }

    [Option("rnaediting", HelpText = "Annotation by rna editing database.")]
    public bool Rnaediting { get; set; }

    [Option("rnaediting_db", MetaValue = "FILE", HelpText = "The rna editing database file")]
    public string RnaeditingDatabase { get; set; }

    public string AnnotationDirectory
    {
      get
      {
        return Path.GetDirectoryName(Path.GetFullPath(this.InputFile)) + "/annotation";
      }
    }

    public string AnnovarInputFile
    {
      get
      {
        return AnnotationDirectory + "/input.txt";
      }
    }

    public string AnnovarOutputFile
    {
      get
      {
        return AnnovarInputFile + ".annovar";
      }
    }

    public string AnnovarParameter
    {
      get
      {
        return string.Format("--buildver {0} --verdbsnp {1} --ver1000g {2} --veresp {3} --genetype {4} --alltranscript --remove --outfile {5} {6} {7}",
          this.AnnovarBuildVersion,
          this.AnnovarVerdbsnp,
          this.AnnovarVer1000g,
          this.AnnovarVeresp,
          this.AnnovarGenetype,
          this.AnnovarOutputFile,
          this.AnnovarInputFile,
          this.AnnovarDatabaseDirectory);
      }
    }

    public override bool PrepareOptions()
    {
      if (this.Annovar)
      {
        if (string.IsNullOrEmpty(this.AnnovarBuildVersion))
        {
          ParsingErrors.Add("--annovar_buildver " + BaseSentenceBuilder.CreateBuiltIn().RequiredOptionMissingText + ".");
          return false;
        }

        var annovar = this.Config.FindOrCreate("annovar", "summarize_annovar.pl");
        if (!annovar.HasParameterSet(this.AnnovarBuildVersion))
        {
          var paramset = new ParameterConfig(this.AnnovarBuildVersion);
          paramset.Parameters["verdbsnp"] = string.IsNullOrEmpty(this.AnnovarVerdbsnp) ? string.Empty : this.AnnovarVerdbsnp;
          paramset.Parameters["ver1000g"] = string.IsNullOrEmpty(this.AnnovarVer1000g) ? string.Empty : this.AnnovarVer1000g;
          paramset.Parameters["veresp"] = string.IsNullOrEmpty(this.AnnovarVeresp) ? string.Empty : this.AnnovarVeresp;
          paramset.Parameters["genetype"] = string.IsNullOrEmpty(this.AnnovarGenetype) ? string.Empty : this.AnnovarGenetype;
          paramset.Parameters["databasedir"] = string.IsNullOrEmpty(this.AnnovarDatabaseDirectory) ? string.Empty : this.AnnovarDatabaseDirectory;
          annovar.ParameterSet[paramset.Name] = paramset;
          this.Config.Save();
          Console.WriteLine(string.Format("annovar buildver {0} is not defined at configuration file {1}, you can modify the configuration file for default parameters!", paramset.Name, this.Config.ConfigFilename));
        }

        var set = annovar.ParameterSet[this.AnnovarBuildVersion];
        if (!CheckParameter("annovar_verdbsnp", annovar, set, "verdbsnp", m => m.AnnovarVerdbsnp, (m, n) => m.AnnovarVerdbsnp = n))
        {
          return false;
        }
        if (!CheckParameter("annovar_ver1000g", annovar, set, "ver1000g", m => m.AnnovarVer1000g, (m, n) => m.AnnovarVer1000g = n))
        {
          return false;
        }
        if (!CheckParameter("annovar_veresp", annovar, set, "veresp", m => m.AnnovarVeresp, (m, n) => m.AnnovarVeresp = n))
        {
          return false;
        }
        if (!CheckParameter("annovar_genetype", annovar, set, "genetype", m => m.AnnovarGenetype, (m, n) => m.AnnovarGenetype = n))
        {
          return false;
        }
        if (!CheckParameter("annovar_databasedir", annovar, set, "databasedir", m => m.AnnovarDatabaseDirectory, (m, n) => m.AnnovarDatabaseDirectory = n))
        {
          return false;
        }
        if (!Directory.Exists(this.AnnovarDatabaseDirectory))
        {
          ParsingErrors.Add(string.Format("--annovar_databasedir : directory not exists : {0}", this.AnnovarDatabaseDirectory));
          return false;
        }

        var files = Directory.GetFiles(this.AnnovarDatabaseDirectory, this.AnnovarBuildVersion + "*");
        if (files.Length == 0)
        {
          ParsingErrors.Add(string.Format("--annovar_databasedir : there is no annovar database {0} in directory {1}", this.AnnovarBuildVersion, this.AnnovarDatabaseDirectory));
          return false;
        }

        if (this.AnnovarSetDefault)
        {
          set.Parameters["verdbsnp"] = this.AnnovarVerdbsnp;
          set.Parameters["ver1000g"] = this.AnnovarVer1000g;
          set.Parameters["veresp"] = this.AnnovarVeresp;
          set.Parameters["genetype"] = this.AnnovarGenetype;
          set.Parameters["databasedir"] = this.AnnovarDatabaseDirectory;
          annovar.DefaultParameterSet = this.AnnovarBuildVersion;
          this.Config.Save();
        }
      }

      if (this.Rnaediting)
      {
        if (!File.Exists(this.RnaeditingDatabase))
        {
          ParsingErrors.Add(string.Format("--rnaediting_db : file not exists : {0}", this.RnaeditingDatabase));
          return false;
        }
      }

      if (this.Distance)
      {
        int count = 0;
        if (!string.IsNullOrEmpty(this.DistanceInsertionBed))
        {
          if (!File.Exists(this.DistanceInsertionBed))
          {
            ParsingErrors.Add(string.Format("--distance_insertion_bed : file not exists : {0}", this.DistanceInsertionBed));
            return false;
          }

          count++;
        }

        if (!string.IsNullOrEmpty(this.DistanceDeletionBed))
        {
          if (!File.Exists(this.DistanceInsertionBed))
          {
            ParsingErrors.Add(string.Format("--distance_deletion_bed : file not exists : {0}", this.DistanceDeletionBed));
            return false;
          }

          count++;
        }

        if (!string.IsNullOrEmpty(this.DistanceJunctionBed))
        {
          if (!File.Exists(this.DistanceInsertionBed))
          {
            ParsingErrors.Add(string.Format("--distance_junction_bed : file not exists : {0}", this.DistanceJunctionBed));
            return false;
          }

          count++;
        }

        if (count == 0)
        {
          ParsingErrors.Add(string.Format("--distance : no bed file defined"));
          return false;
        }
      }

      if (!this.IsPileup)
      {
        if (!File.Exists(this.InputFile))
        {
          ParsingErrors.Add(string.Format("-i : input file not exists : {0}", this.InputFile));
          return false;
        }

        if (this.Annovar && !Directory.Exists(this.AnnotationDirectory))
        {
          try
          {
            Directory.CreateDirectory(this.AnnotationDirectory);
          }
          catch (Exception ex)
          {
            ParsingErrors.Add(string.Format("create directory {0} failed : {1}.", this.AnnotationDirectory, ex.Message));
            return false;
          }
        }
      }

      return true;
    }

    private bool CheckParameter(string optionName, ProgramConfig program, ParameterConfig paramset, string paramname, Func<AnnotationOptions, string> getFunc, Action<AnnotationOptions, string> setFunc)
    {
      var value = getFunc(this);
      value = paramset.GetParameter(paramname, value);
      if (string.IsNullOrEmpty(value))
      {
        ParsingErrors.Add(string.Format("{0} {1}. Or you can define the default value at {2}::{3}::{4} in configuration file {5}.",
          optionName,
          BaseSentenceBuilder.CreateBuiltIn().RequiredOptionMissingText,
          program.Name,
          paramset.Name,
          paramname,
          this.Config.ConfigFilename));
        return false;
      }
      setFunc(this, value);
      return true;
    }
  }
}
